{{define "title"}}Roster{{end}}
{{define "head"}}
	{{JS "/static/js/vue.min.js"}}
	{{JS "/static/js/vue-resource.min.js"}}
{{end}}
{{define "content"}}

<div id="roster">

	<!-- groups cloud -->
	<div v-if="ngroups > 1" class="page-header">
		<span v-for="(group, gid) in groups">
			[<a :href="'#' + gid">${group}</a>]
		</span>
	</div>

	<!-- group card -->
	<div v-for="(group, gid) in groups" class="panel panel-default">
		<!-- gc: header -->
		<group-info :gid="gid" :group="group" :ngroups="ngroups"></group-info>

		<!-- gc: details table -->
		<keep-alive>
			<component v-if="active == gid" :gid="gid" @show-details="showDetails" :is="details"></component>
		</keep-alive>

		<!-- gc: show details button -->
		<button v-if="active != gid" v-on:click="showDetails(gid)" class="btn btn-link pull-right form-control" type="button">
			<i class="fa fa-chevron-down"></i>
		</button>
		<!-- this makes details button to be within the panel, otherwise it drops under -->
		<div class="clearfix"></div>
	</div>

</div>

<template id="clock">
	<span :title="title">
		<span><i class="fa fa-clock-o fa-fw"></i></span>
		<span>${time}</span>
		<span> UTC${tz.utcOffset}</span>
	</span>
</template>

<template id="group-details-map">
	<div>
		<div id="map" style="height: 400px; margin: 0 auto; background: lightgray;">
			<h1 v-if="loading" class="text-center"><i class="fa fa-spinner fa-spin"></i></h1>
		</div>
		<button class="btn btn-link form-control" @click="showTable()">back to table</burron>
	</div>
</template>

<template id="group-details-table">
	<table id="datatable" class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Full Name</th>
				<th>Role</th>
				<th v-if="squads">Squad</th>
				<th>Component</th>
				<th class="no-sort">IRC</th>
				<th class="no-sort">External</th>
				<th>Location</th>
				<th class="no-sort">
					<a @click="showMap()" style="cursor: pointer;"><i class="fa fa-map-o"></i> Time</a>
				</th>
			</tr>
		</thead>
		<tbody>
			<tr v-for="(member, uid) in members">
				<td>
					<a :href="'https://rover.redhat.com/people/profile/' + uid + '/'">${member.Name}</a>
				</td>
				<td>${member.Role} <span v-if="member.CC == '667'">(QE)</span></td>
				<td v-if="squads">${member.Squad}</td>
				<td><span v-for="(data, name) in member.Data" v-if="name == 'Comp'">${data} </span></td>
				<td>${member.IRC}</td>
				<td>
					<span v-for="(link, name) in member.Data">
						<span v-if="name == 'Gtalk'"><i class="fa fa-google" title="Hangouts"></i> ${link} </span>
						<!-- span v-if="name == 'Link'"><i class="fa fa-link" title="Link"> ${link} </i></span -->
					</span>
				</td>
				<td v-if="member.Remote == false">${member.Country}</td>
				<td v-else>Remote ${member.Country}</td>
				<td>
					<clock :uid="uid"></clock>
				</td>
			</tr>
		</tbody>
	</table>
</template>

<template id="group-info">
<div class="panel-default">
	<div :id="gid" class="panel-heading">
		<h2 class="panel-title">
			<span>${group}</span>
			<span v-if="ngroups != 1">&nbsp;<a :href="'/roster/'+gid" target="_blank" style="color:black;"><i class="fa fa-external-link"></i></a></span>
			<span class="pull-right">
				<span v-if="groupinfo.Size.squads" title="Squads"><i class="fa fa-users"></i> ${groupinfo.Size.squads}</span>
				<span title="People"><i class="fa fa-user-circle-o"></i> ${groupinfo.Size.people}</span>
			</span>
		</h2>
	</div>
	<div v-if="gid != 'rhos-dfg-lt'" class="panel-body">
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-2">
					<div v-for="(link, name) in groupinfo.Links">
						<i v-if="name == 'Backlog'" class="fa fa-tasks"></i>
						<i v-else-if="name == 'Mission'" class="fa fa-bullseye"></i>
						<i v-else class="fa fa-link"></i>
						<a :href="link">${name}</a>
					</div>
				</div>
				<div class="col-md-5">
					<div v-for="(role, id) in groupinfo.Head" v-if="id == 'Steward' || id == 'Product Manager'">
						<strong>${id}<span v-if="role.length > 1">s</span>:</strong>
						<a v-for="man in role" :href="'https://rover.redhat.com/people/profile/' + man.ID + '/'"> ${man.Name}</a>
					</div>
				</div>
				<div class="col-md-5">
					<div v-for="(role, id) in groupinfo.Head" v-if="id == 'User Advocate' || id == 'Team Catalyst' || id == 'Squad Lead'">
						<strong>${id}<span v-if="role.length > 1">s</span>:</strong>
						<a v-for="man in role" :href="'https://rover.redhat.com/people/profile/' + man.ID + '/'"> ${man.Name}</a>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div v-else class="panel-body">
		<div class="container">
			<div class="row">
				<h4>Here be dragons!</h4>
			</div>
		</div>
	</div>
</div>
</template>

<script type="text/javascript">
	var GroupDetailsClock = {
		delimiters: ['${', '}'],
		template: '#clock',
		props: ['uid'],
		data() {
			return {
				tz: [],
				time: '',
				date: '',
			}
		},
		computed: {
			title() {
				return this.date + '\n' + this.tz.tzName + '\n';
			},
		},
		methods: {
			calcTime() {
				const d = new Date();
				const utc = d.getTime() + (d.getTimezoneOffset() * 60000);
				const nd = new Date(utc + (3600000 * this.tz.utcOffset));
				const options_time = { hour: 'numeric', minute: 'numeric' }
				const options_date = { month: 'short', day: 'numeric', year: 'numeric' }
				this.time = Intl.DateTimeFormat('en-US', options_time).format(nd);
				this.date = Intl.DateTimeFormat('en-US', options_date).format(nd);
			},
		},
		async mounted() {
			this.tz = (await this.$http.get('/api/v2/people/' + this.uid + '/tz')).body;

			this.interval = setInterval(this.calcTime, 60000);
			this.calcTime();
		},
		beforeDestroy() {
			clearInterval(this.interval);
		},
	}

	var GroupDetailsMap = {
		template: '#group-details-map',
		delimiters: ['${', '}'],
		props: ['gid'],
		data() {
			return {
				map: null,
				bounds: null,
				markers: [],
				tz: [],
				loading: true,
			}
		},
		methods: {
			showTable() {
				this.$emit('show-details', this.gid, 'group-details-table');
			},
		},
		async mounted() {
			this.tz = (await this.$http.get('/api/v2/groups/' + this.gid + '/geo')).body;

			this.bounds = new google.maps.LatLngBounds();
	        const mapCanvas = document.getElementById('map');
			const mapOptions = {
				streetViewControl: false,
			}
			this.map = new google.maps.Map(mapCanvas, mapOptions);

			this.tz.forEach((coord) => {
				// lat and lng just shuffles original values a bit, so we don't have
				// all the pins pointing to very same place
				const lat = parseFloat(coord.lat) + (Math.random() / 2500);
				const lng = parseFloat(coord.lng) + (Math.random() / 2500);
				const position = new google.maps.LatLng(lat, lng);
				const marker = new google.maps.Marker({
					position: position,
					label: coord.uid.substring(0,2).toUpperCase(),
					title: coord.name,
					map: this.map,
				});
				this.markers.push(marker);
				this.map.fitBounds(this.bounds.extend(position));
			});

			const markerCluster = new MarkerClusterer(this.map, this.markers, {imagePath: '/static/img/map/m'});
			nite.init(this.map); // day-night overlay
			this.interval = setInterval(nite.refresh(), 10000);
			this.loading = false;
		},
		beforeDestroy() {
			clearInterval(this.interval);
		},
	}

	var GroupDetailsTable = {
		template: '#group-details-table',
		delimiters: ['${', '}'],
		props: ['gid'],
		data() {
			return {
				members: [],
			}
		},
		computed: {
			squads() {
				for (uid in this.members) {
					if (this.members[uid].Squad != '') return true;
				}
				return false;
			},
		},
		methods: {
			showMap() {
				this.$emit('show-details', this.gid, 'group-details-map');
			},
		},
		async mounted() {
			this.members = (await this.$http.get('/api/v2/groups/' + this.gid + '/members')).body;
		},
		updated() {
			$('#datatable').DataTable({
				searching: false,
				paging: false,
				info: false,
				'sDom': 't',
				"columnDefs": [{
					"targets": 'no-sort',
					"orderable": false,
					}],
				});
		},
		components: {
			'clock': GroupDetailsClock,
		},
	}

	var GroupInfo = {
		template: '#group-info',
		delimiters: ['${', '}'],
		props: ['gid', 'group', 'ngroups'],
		data() {
			return {
				groupinfo: {
					Size: {},
					Links: {},
					Head: {},
				},
			}
		},
		async mounted() {
			this.groupinfo = (await this.$http.get('/api/v2/groups/' + this.gid + '/info')).body;
		},
	}

	let roster = new Vue({
		el: '#roster',
		delimiters: ['${', '}'],
		data: {
			groups: {},
			active: '{{.group}}',
			details: '',
		},
		computed: {
			ngroups() {
				return Object.keys(this.groups).length;
			},
		},
		async mounted() {
			let urlAPI = '/api/v2/groups'
			if (this.active != '') {
				urlAPI += '/'+this.active;
				this.details = 'group-details-table';
			}

			this.groups = (await this.$http.get(urlAPI)).body;
		},
		methods: {
			showDetails(group, details) {
				this.active = group;
				this.details = 'group-details-table';
				if (details)
					this.details = details;
			},
		},
		components: {
			'group-info': GroupInfo,
			'group-details-table': GroupDetailsTable,
			'group-details-map': GroupDetailsMap,
		},
	});
</script>

<script async defer src="https://maps.google.com/maps/api/js?key=AIzaSyD6aesunznX9hHrXnqcl2yXqOKhvgOiOkI"></script>
{{JS "/static/js/markerclusterer.min.js"}}
{{JS "/static/js/nite-overlay.min.js"}}
{{JS "/static/js/jquery.dataTables.min.js"}}
{{template "footer" .}}{{end}}
{{define "foot"}}{{end}}